// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (full_name, email, hashed_password, role)
VALUES ($1, $2, $3, $4)
RETURNING user_id, full_name, email,role, created_at
`

type CreateUserParams struct {
	FullName       string   `json:"full_name"`
	Email          string   `json:"email"`
	HashedPassword string   `json:"hashed_password"`
	Role           UserRole `json:"role"`
}

type CreateUserRow struct {
	UserID    int64     `json:"user_id"`
	FullName  string    `json:"full_name"`
	Email     string    `json:"email"`
	Role      UserRole  `json:"role"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Email,
		arg.HashedPassword,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, full_name, email FROM users WHERE user_id = $1
`

type GetUserByIDRow struct {
	UserID   int64  `json:"user_id"`
	FullName string `json:"full_name"`
	Email    string `json:"email"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(&i.UserID, &i.FullName, &i.Email)
	return i, err
}
